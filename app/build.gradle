buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven {url 'https://clojars.org/repo/'}
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.6'
    }

}

Properties props = new Properties()
File propsFile = file('fabric.properties')
// 環境変数存在チェック
if (
       ( System.getenv("FABRIC_KEY") == null || "".equals(System.getenv("FABRIC_KEY")) )
    || ( System.getenv("FABRIC_SECRET") == null || "".equals(System.getenv("FABRIC_SECRET")) )
    || ( System.getenv("ANDROID_MIN_SDK_VERSION") == null || "".equals(System.getenv("ANDROID_MIN_SDK_VERSION")) )
    || ( System.getenv("DBMS_ONLINE_PATH") == null || "".equals(System.getenv("DBMS_ONLINE_PATH")) )
) {
    throw new GradleException("Missing System.env for fabric.properties. "
            + "System.getenv(\"FABRIC_KEY\"):[" + System.getenv("FABRIC_KEY") + "], "
            + "System.getenv(\"FABRIC_KEY\"):[" + System.getenv("FABRIC_KEY") + "], "
            + "System.getenv(\"ANDROID_MIN_SDK_VERSION\"):[" + System.getenv("ANDROID_MIN_SDK_VERSION") + "]"
            + "System.getenv(\"DBMS_ONLINE_PATH\"):[" + System.getenv("DBMS_ONLINE_PATH") + "]"
    );
}
propsFile.write(
    "apiKey=" + System.getenv("FABRIC_KEY") + "\n" + "apiSecret=" + System.getenv("FABRIC_SECRET") + "\n"
)

if ( System.getenv("ANDROID_RELEASE_KEY") == null || "".equals(System.getenv("ANDROID_RELEASE_KEY")) ) {
    throw new GradleException("Missing System.env for release password.");
}

apply plugin: 'com.android.application'
apply plugin: 'deploygate'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'io.fabric'

// Didn't find class "java.beans.Introspector" on path: DexPathList回避用
// http://stackoverflow.com/questions/30012940/missing-java-beans-introspector-in-spring-libgdx-android-application
// tasks.withType(com.android.build.gradle.tasks.Dex) {
//     additionalParameters=['--core-library']
// }

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "net.in.ahr.dbms"
        minSdkVersion System.getenv("ANDROID_MIN_SDK_VERSION")
        // 実機デバッグ時
         minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "0.0.1"
        multiDexEnabled true
        resConfigs "en", "ja"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {

        }
        release {
            storeFile file("conf/release.jks")
            storePassword System.getenv("ANDROID_RELEASE_KEY")
            keyAlias System.getenv("ANDROID_RELEASE_KEY")
            keyPassword System.getenv("ANDROID_RELEASE_KEY")
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "DBMS_ONLINE_PATH", "\"" + System.getenv("DBMS_ONLINE_PATH") + "\""
            debuggable true
            // // ※debuggable="true"の場合のみDeployGateのSDKが動作
            minifyEnabled false
//            minifyEnabled true
//            shrinkResources true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"

            // for Jacoco
            testCoverageEnabled = true
        }
        release {
            buildConfigField "String", "DBMS_ONLINE_PATH", "\"" + System.getenv("DBMS_ONLINE_PATH") + "\""
            debuggable true
            minifyEnabled false
// TODO: 以下の設定があるとgradleビルド時にエラーが発生する。
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        // ここには「buildConfigField」は書けないので注意

        // JUnitログ出力
        testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
            res.srcDirs = ['src/main/res']
        }
    }
    // duplicate files during packaging of APKエラー対策 http://qiita.com/radiocat/items/5435979b27f521bf571f
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    // Didn't find class "java.beans.Introspector" on path: DexPathList回避用
    // http://stackoverflow.com/questions/30012940/missing-java-beans-introspector-in-spring-libgdx-android-application
    // tasks.withType(com.android.build.gradle.tasks.Dex) {
    //     additionalParameters=['--core-library']
    // }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'de.greenrobot:greendao:2.1.0'
    compile 'org.apache.commons:commons-lang3:3.1'
//    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'com.opencsv:opencsv:3.7'
    compile 'com.google.http-client:google-http-client-android:1.20.0'
    compile('com.google.api-client:google-api-client:1.20.0') {
        exclude(group: 'com.android.support')
    }
    compile('com.google.gdata:core:1.47.1'){
//        exclude(group: 'com.google.android', module: 'android')
        exclude(group: 'com.google.guava')
        exclude(group: 'com.android.support')
//        exclude(group: 'com.google.guava', module: 'guava-jdk5')
//        exclude(group: 'com.android.support', module: 'support-annotations')
    }
    compile 'com.deploygate:sdk:3.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
        transitive = true;
    }
    compile 'uk.co.chrisjenx:calligraphy:2.0.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.greenrobot:eventbus:3.0.0'

    // Android開発してたらNoClassDefFoundErrorでハマった
    // http://qiita.com/ichizin/items/ae5d7b993b2629d9637d
    compile 'com.android.support:multidex:1.0.1'

    // Icepick
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'

    // for UnitTest
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile "org.mockito:mockito-core:1.9.5"

    // for Robolectric
    testCompile 'org.robolectric:robolectric:3.0'

    androidTestCompile ('com.android.support.test:runner:0.5') { exclude module: 'support-annotations' }
//    androidTestCompile ('com.android.support.test:rules:0.3') { exclude module: 'support-annotations' }
    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude(module: 'support-annotations')
        exclude(module: 'jsr305')
    }
//    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2') {
//        exclude(module: 'support-annotations')
//        exclude(module: 'jsr305')
//    }

}

// for Jacoco
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") { // testDebug
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "./build/reports/jacoco/${project.name}"
        }
    }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug', // './build/intermediates/classes/development/debug'
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
            ]
    )

    sourceDirectories = files('src/main/java')
    executionData = files('./build/jacoco/testDebugUnitTest.exec')
}