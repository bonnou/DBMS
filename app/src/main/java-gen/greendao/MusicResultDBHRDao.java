package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.MusicResultDBHR;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_RESULT_DBHR.
*/
public class MusicResultDBHRDao extends AbstractDao<MusicResultDBHR, Long> {

    public static final String TABLENAME = "MUSIC_RESULT_DBHR";

    /**
     * Properties of entity MusicResultDBHR.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClearLamp = new Property(1, String.class, "clearLamp", false, "CLEAR_LAMP");
        public final static Property ExScore = new Property(2, Integer.class, "exScore", false, "EX_SCORE");
        public final static Property Bp = new Property(3, Integer.class, "bp", false, "BP");
        public final static Property ScoreRank = new Property(4, String.class, "scoreRank", false, "SCORE_RANK");
        public final static Property ScoreRate = new Property(5, Double.class, "scoreRate", false, "SCORE_RATE");
        public final static Property MissRate = new Property(6, Double.class, "missRate", false, "MISS_RATE");
        public final static Property MemoProgress = new Property(7, String.class, "memoProgress", false, "MEMO_PROGRESS");
        public final static Property MemoOther = new Property(8, String.class, "memoOther", false, "MEMO_OTHER");
        public final static Property PGreat = new Property(9, String.class, "pGreat", false, "P_GREAT");
        public final static Property Great = new Property(10, String.class, "great", false, "GREAT");
        public final static Property Good = new Property(11, String.class, "good", false, "GOOD");
        public final static Property Bad = new Property(12, String.class, "bad", false, "BAD");
        public final static Property Poor = new Property(13, String.class, "poor", false, "POOR");
        public final static Property ComboBreak = new Property(14, String.class, "comboBreak", false, "COMBO_BREAK");
        public final static Property InsDate = new Property(15, java.util.Date.class, "insDate", false, "INS_DATE");
        public final static Property UpdDate = new Property(16, java.util.Date.class, "updDate", false, "UPD_DATE");
    };


    public MusicResultDBHRDao(DaoConfig config) {
        super(config);
    }
    
    public MusicResultDBHRDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_RESULT_DBHR' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CLEAR_LAMP' TEXT," + // 1: clearLamp
                "'EX_SCORE' INTEGER," + // 2: exScore
                "'BP' INTEGER," + // 3: bp
                "'SCORE_RANK' TEXT," + // 4: scoreRank
                "'SCORE_RATE' REAL," + // 5: scoreRate
                "'MISS_RATE' REAL," + // 6: missRate
                "'MEMO_PROGRESS' TEXT," + // 7: memoProgress
                "'MEMO_OTHER' TEXT," + // 8: memoOther
                "'P_GREAT' TEXT," + // 9: pGreat
                "'GREAT' TEXT," + // 10: great
                "'GOOD' TEXT," + // 11: good
                "'BAD' TEXT," + // 12: bad
                "'POOR' TEXT," + // 13: poor
                "'COMBO_BREAK' TEXT," + // 14: comboBreak
                "'INS_DATE' INTEGER," + // 15: insDate
                "'UPD_DATE' INTEGER);"); // 16: updDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_RESULT_DBHR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicResultDBHR entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String clearLamp = entity.getClearLamp();
        if (clearLamp != null) {
            stmt.bindString(2, clearLamp);
        }
 
        Integer exScore = entity.getExScore();
        if (exScore != null) {
            stmt.bindLong(3, exScore);
        }
 
        Integer bp = entity.getBp();
        if (bp != null) {
            stmt.bindLong(4, bp);
        }
 
        String scoreRank = entity.getScoreRank();
        if (scoreRank != null) {
            stmt.bindString(5, scoreRank);
        }
 
        Double scoreRate = entity.getScoreRate();
        if (scoreRate != null) {
            stmt.bindDouble(6, scoreRate);
        }
 
        Double missRate = entity.getMissRate();
        if (missRate != null) {
            stmt.bindDouble(7, missRate);
        }
 
        String memoProgress = entity.getMemoProgress();
        if (memoProgress != null) {
            stmt.bindString(8, memoProgress);
        }
 
        String memoOther = entity.getMemoOther();
        if (memoOther != null) {
            stmt.bindString(9, memoOther);
        }
 
        String pGreat = entity.getPGreat();
        if (pGreat != null) {
            stmt.bindString(10, pGreat);
        }
 
        String great = entity.getGreat();
        if (great != null) {
            stmt.bindString(11, great);
        }
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(12, good);
        }
 
        String bad = entity.getBad();
        if (bad != null) {
            stmt.bindString(13, bad);
        }
 
        String poor = entity.getPoor();
        if (poor != null) {
            stmt.bindString(14, poor);
        }
 
        String comboBreak = entity.getComboBreak();
        if (comboBreak != null) {
            stmt.bindString(15, comboBreak);
        }
 
        java.util.Date insDate = entity.getInsDate();
        if (insDate != null) {
            stmt.bindLong(16, insDate.getTime());
        }
 
        java.util.Date updDate = entity.getUpdDate();
        if (updDate != null) {
            stmt.bindLong(17, updDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicResultDBHR readEntity(Cursor cursor, int offset) {
        MusicResultDBHR entity = new MusicResultDBHR( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clearLamp
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // exScore
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // bp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // scoreRank
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // scoreRate
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // missRate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memoProgress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memoOther
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pGreat
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // great
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // good
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bad
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // poor
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // comboBreak
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // insDate
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // updDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicResultDBHR entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClearLamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExScore(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBp(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setScoreRank(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScoreRate(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setMissRate(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setMemoProgress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemoOther(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPGreat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGreat(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGood(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBad(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPoor(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComboBreak(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInsDate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setUpdDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicResultDBHR entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicResultDBHR entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
