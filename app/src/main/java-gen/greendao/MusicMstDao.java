package greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.MusicMst;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_MST.
*/
public class MusicMstDao extends AbstractDao<MusicMst, Long> {

    public static final String TABLENAME = "MUSIC_MST";

    /**
     * Properties of entity MusicMst.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Nha = new Property(2, String.class, "nha", false, "NHA");
        public final static Property Genre = new Property(3, String.class, "genre", false, "GENRE");
        public final static Property Artist = new Property(4, String.class, "artist", false, "ARTIST");
        public final static Property BpmFrom = new Property(5, Integer.class, "bpmFrom", false, "BPM_FROM");
        public final static Property BpmTo = new Property(6, Integer.class, "bpmTo", false, "BPM_TO");
        public final static Property Difficult = new Property(7, String.class, "difficult", false, "DIFFICULT");
        public final static Property Notes = new Property(8, Integer.class, "notes", false, "NOTES");
        public final static Property ScratchNotes = new Property(9, Integer.class, "scratchNotes", false, "SCRATCH_NOTES");
        public final static Property ChargeNotes = new Property(10, Integer.class, "chargeNotes", false, "CHARGE_NOTES");
        public final static Property BackSpinScratchNotes = new Property(11, Integer.class, "backSpinScratchNotes", false, "BACK_SPIN_SCRATCH_NOTES");
        public final static Property SortNumInDifficult = new Property(12, Integer.class, "sortNumInDifficult", false, "SORT_NUM_IN_DIFFICULT");
        public final static Property MstVersion = new Property(13, String.class, "mstVersion", false, "MST_VERSION");
        public final static Property InsDate = new Property(14, java.util.Date.class, "insDate", false, "INS_DATE");
        public final static Property MusicResultIdDBHR = new Property(15, long.class, "musicResultIdDBHR", false, "MUSIC_RESULT_ID_DBHR");
    };

    private DaoSession daoSession;


    public MusicMstDao(DaoConfig config) {
        super(config);
    }
    
    public MusicMstDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_MST' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'NHA' TEXT," + // 2: nha
                "'GENRE' TEXT," + // 3: genre
                "'ARTIST' TEXT," + // 4: artist
                "'BPM_FROM' INTEGER," + // 5: bpmFrom
                "'BPM_TO' INTEGER," + // 6: bpmTo
                "'DIFFICULT' TEXT," + // 7: difficult
                "'NOTES' INTEGER," + // 8: notes
                "'SCRATCH_NOTES' INTEGER," + // 9: scratchNotes
                "'CHARGE_NOTES' INTEGER," + // 10: chargeNotes
                "'BACK_SPIN_SCRATCH_NOTES' INTEGER," + // 11: backSpinScratchNotes
                "'SORT_NUM_IN_DIFFICULT' INTEGER," + // 12: sortNumInDifficult
                "'MST_VERSION' TEXT," + // 13: mstVersion
                "'INS_DATE' INTEGER," + // 14: insDate
                "'MUSIC_RESULT_ID_DBHR' INTEGER NOT NULL );"); // 15: musicResultIdDBHR
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_MST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicMst entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nha = entity.getNha();
        if (nha != null) {
            stmt.bindString(3, nha);
        }
 
        String genre = entity.getGenre();
        if (genre != null) {
            stmt.bindString(4, genre);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(5, artist);
        }
 
        Integer bpmFrom = entity.getBpmFrom();
        if (bpmFrom != null) {
            stmt.bindLong(6, bpmFrom);
        }
 
        Integer bpmTo = entity.getBpmTo();
        if (bpmTo != null) {
            stmt.bindLong(7, bpmTo);
        }
 
        String difficult = entity.getDifficult();
        if (difficult != null) {
            stmt.bindString(8, difficult);
        }
 
        Integer notes = entity.getNotes();
        if (notes != null) {
            stmt.bindLong(9, notes);
        }
 
        Integer scratchNotes = entity.getScratchNotes();
        if (scratchNotes != null) {
            stmt.bindLong(10, scratchNotes);
        }
 
        Integer chargeNotes = entity.getChargeNotes();
        if (chargeNotes != null) {
            stmt.bindLong(11, chargeNotes);
        }
 
        Integer backSpinScratchNotes = entity.getBackSpinScratchNotes();
        if (backSpinScratchNotes != null) {
            stmt.bindLong(12, backSpinScratchNotes);
        }
 
        Integer sortNumInDifficult = entity.getSortNumInDifficult();
        if (sortNumInDifficult != null) {
            stmt.bindLong(13, sortNumInDifficult);
        }
 
        String mstVersion = entity.getMstVersion();
        if (mstVersion != null) {
            stmt.bindString(14, mstVersion);
        }
 
        java.util.Date insDate = entity.getInsDate();
        if (insDate != null) {
            stmt.bindLong(15, insDate.getTime());
        }
        stmt.bindLong(16, entity.getMusicResultIdDBHR());
    }

    @Override
    protected void attachEntity(MusicMst entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicMst readEntity(Cursor cursor, int offset) {
        MusicMst entity = new MusicMst( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nha
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // genre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artist
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // bpmFrom
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // bpmTo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // difficult
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // notes
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // scratchNotes
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // chargeNotes
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // backSpinScratchNotes
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sortNumInDifficult
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mstVersion
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // insDate
            cursor.getLong(offset + 15) // musicResultIdDBHR
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicMst entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNha(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGenre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtist(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBpmFrom(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBpmTo(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDifficult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNotes(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setScratchNotes(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setChargeNotes(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBackSpinScratchNotes(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSortNumInDifficult(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMstVersion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInsDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setMusicResultIdDBHR(cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicMst entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicMst entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMusicResultDBHRDao().getAllColumns());
            builder.append(" FROM MUSIC_MST T");
            builder.append(" LEFT JOIN MUSIC_RESULT_DBHR T0 ON T.'MUSIC_RESULT_ID_DBHR'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MusicMst loadCurrentDeep(Cursor cursor, boolean lock) {
        MusicMst entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MusicResultDBHR musicResultDBHR = loadCurrentOther(daoSession.getMusicResultDBHRDao(), cursor, offset);
         if(musicResultDBHR != null) {
            entity.setMusicResultDBHR(musicResultDBHR);
        }

        return entity;    
    }

    public MusicMst loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MusicMst> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MusicMst> list = new ArrayList<MusicMst>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MusicMst> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MusicMst> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
